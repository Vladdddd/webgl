// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
uniform mat4 ModelViewProjectionMatrix;
uniform mat4 TranslationMatrix;
uniform mat4 NormalMatrix;
varying vec4 color;
uniform bool lighting;
uniform vec3 lightPos;

vec3 ambientColor = vec3(0.01, 0.1, 0.02);
vec3 diffuseColor = vec3(0.11, 0.8, 0.13);
vec3 specularColor = vec3(0.0, 0.0, 0.0);

float shininess = 80.0;

void main() {
    vec4 vertPos4 = ModelViewProjectionMatrix * vec4(vertex, 1.0);
    vec3 vertPos = vec3(vertPos4) / vertPos4.w;
    vec4 norm = NormalMatrix*vec4(normal,1.0);
    
    vec3 N = normalize(vec3(norm));
    vec3 L = normalize(lightPos - vertPos);

    float lambertian = max(dot(N, L), 0.0);
    float specular = 0.5;

    vec3 R = reflect(-L, N);      
    vec3 V = normalize(-vertPos); 
       
    float specAngle = max(dot(R, V), 0.0);
    specular = pow(specAngle, 80.0);
   
    color = vec4(ambientColor + lambertian * diffuseColor + specular * specularColor, 1.0);
    gl_Position = vertPos4;

    if(lighting){
        gl_Position = TranslationMatrix*vertPos4;
    }
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec4 color;

void main() {
    gl_FragColor = color;
}`;