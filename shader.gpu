// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
uniform vec3 lightPosition;
uniform mat4 ModelViewProjectionMatrix, NormalMatrix;
varying vec3 normalInterp;
varying vec3 fragPos;
varying vec3 lightDir;

void main() {
    vec4 fragPos4 = ModelViewProjectionMatrix * vec4(vertex, 1.0);
    fragPos = vec3(fragPos4) / fragPos4.w;
    normalInterp = vec3(NormalMatrix * vec4(normal, 0.0));
    lightDir = normalize(lightPosition - fragPos);
    gl_Position = fragPos4;
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec3 normalInterp;
varying vec3 fragPos;
varying vec3 lightDir;

float Ka = 1.0;
float Kd = 0.9;
float Ks = 1.0;
float shininess = 80.0;

vec3 ambientColor = vec3(0.01, 0.1, 0.02);
vec3 diffuseColor = vec3(0.11, 0.8, 0.13);
vec3 specularColor = vec3(0.0, 0.0, 0.0);

uniform vec4 color;

void main() {
    vec3 N = normalize(normalInterp);
    vec3 L = normalize(lightDir);
    float lambertian = max(dot(N, L), 0.0);
    float specular = 0.5;
    vec3 R = reflect(-L, N);
    vec3 V = normalize(-fragPos);
    float specAngle = max(dot(R, V), 0.0);
    specular = pow(specAngle, shininess);
    
    float distance = length(lightDir);
    float attenuation = 1.0 / (1.0 + 0.1 * distance + 0.01 * (distance * distance));
    gl_FragColor = vec4(attenuation * (Ka * ambientColor +
                                       Kd * lambertian * diffuseColor +
                                       Ks * specular * specularColor), 1.0);
}`;